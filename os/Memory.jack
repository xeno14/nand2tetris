// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
 /**
  * Fragment RAM using linked list.
  *
  */
class Memory {

    static Array RAM;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let RAM = 0;
        let freeList = 2048;
        let RAM[freeList] = 0;          // next
        let RAM[freeList+1] = 14335;    // size
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let RAM[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int addr, res, newAddr;
        let addr = freeList;
        while (addr > 0) {
            // find first
            // fragment size >= size+2
            if (~(RAM[addr+1]<(size+2))) {
                // decrement the current size
                let RAM[addr+1] = RAM[addr+1] - (size + 2);
                // create a new fragment
                let newAddr = addr+RAM[addr+1]+4;
                let RAM[newAddr-2] = 0;     // next
                let RAM[newAddr-1] = size;  // size
                return newAddr+2;
            }
            let addr = RAM[addr];
        }
        // unable to allocate...
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // prepend the fragment
        let RAM[o-2] = freeList;  // next
        let freeList = o-2;
        return;
    }    
}
