// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
 /**
  * Fragment heap using linked list.
  *
  */
class Memory {

    static Array heap, RAM;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let RAM = 0;
        let heap = 2048;
        let heap[0] = 0;      // next
        let heap[1] = 14335;  // size
        let freeList = 2048;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let RAM[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int addr, freeSize, res, newAddr;
        let addr = freeList;
        while (addr) {
            let freeSize = heap[addr+1];
            // freeSize >= size+2
            if (~(freeSize<size+2)) {
                // decrement the size
                let heap[addr+1] = freeSize - size - 2;
                let newAddr = addr + heap[addr+1] + 2;
                let heap[newAddr-2] = 0;
                let heap[newAddr-1] = size;
                return newAddr;
            }
            let addr = heap[addr];
        }
        // unable to allocate...
        do Output.printString("Unable to allocate memory");
        do Sys.halt();
        return;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // prepend the fragment
        let heap[o-2] = freeList;
        let freeList = o;
        return;
    }    
}
