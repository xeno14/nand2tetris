// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int BASEADDR;
    static int MEMORYSIZE;
    static boolean color;
    static boolean BLACK, WHITE;
    static Array screen;
    // copy of Math.jack
    static Array twoToThe;
    static int WORDSIZE;

    /** Initializes the Screen. */
    function void init() {
        var int i;

        let BASEADDR = 16384;
        let MEMORYSIZE = 8192;  // 8k=512*256/16
        let screen = BASEADDR;
        let WHITE = false;
        let BLACK = true;
        let color = BLACK;

        // copy of Math.jack
        let WORDSIZE = 16;
        let twoToThe = Array.new(WORDSIZE);
        let twoToThe[0] = 1;
        let i = 1;
        while (i<WORDSIZE) {
            // t[i] = t[i-1] * 2
            let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
            let i = i+1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i, end;

        // set 0 to all the screen memory map
        let i=0;
        while (i < MEMORYSIZE) {
            let screen[i] = WHITE;
            let i=i+1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    function int address(int x, int y) {
        // (x + 512y) / 16
        return (32 * y) + (x / 16);
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int bit, addr, i;
        let addr = Screen.address(x, y);
        let bit = twoToThe[x&15];
        // black
        if (color) { 
            let screen[addr] = screen[addr] | bit;
        }
        // white
        else {
            let screen[addr] = screen[addr] & (~bit);
        }
        return;
    }

    // fast draw horizontal line
    function void drawHorizontal(int x1, int x2, int y) {
        var int tmp, x, addr, endAddr, val, bit, r;

        // while (~(x1>x2)) {
        //     do Screen.drawPixel(x1, y);
        //     let x1=x1+1;
        // }

        // make sure x1 < x2
        if (x1 > x2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
        }
        let addr = Screen.address(x1, y)+1;
        let endAddr = Screen.address(x2, y);
        while (addr < endAddr) {
            let screen[addr] = color;
            let addr = addr+1;
        }
        let r = x1&15;
        let x = x1;
        while ((r<16) & (x < x2)) {
            do Screen.drawPixel(x, y);
            let x=x+1;
            let r=r+1;
        }
        let r = x2&15;
        let x = x2;
        while ((r>-1) & (x1 < x)) {
            do Screen.drawPixel(x, y);
            let x=x-1;
            let r=r-1;
        }
        return;
    }

    function void drawVertical(int x, int y1, int y2) {
        var int tmp, addr, val, bit, endAddr;

        // make sure y1 < y2
        if (y1 > y2) {
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        let val = twoToThe[x&15];
        let addr = Screen.address(x, y1);
        let endAddr = Screen.address(x, y2+1);
        while (addr<endAddr) {
            let screen[addr] = val;
            let addr=addr+32;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int tmp, a, b, diff, dx, dy;
        var boolean neg;

        if (y1 = y2) { 
            do Screen.drawHorizontal(x1, x2, y1);
            return;
        }
        if (x1 = x2) {
            do Screen.drawVertical(x1, y1, y2);
            return;
        }
        // make sure x1 < x2
        if (x1 > x2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        // draw diagonal line
        let a=0;
        let b=0;
        let diff=0;
        let dx=x2-x1;
        let dy=y2-y1;

        // for dy < 0, simulate a line as if dy>0 then map to the correct
        // coordinate when drawing a pixel.
        if (dy < 0) {
            let dy=-dy;
            let neg=true;
        } else {
            let neg=false;
        }

        // (a<=dx) & (b<=dy)
        while ( ~(a>dx) & ~(b>dy) ) {
            if (neg) {
                // map to the correct coordinate
                do Screen.drawPixel(x1+a, y1-b);
            } else {
                do Screen.drawPixel(x1+a, y1+b);
            }
            if (diff < 0) {
                let a=a+1;
                let diff=diff+dy;
            } else {
                let b=b+1;
                let diff=diff-dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int tmp;
        if (y1 > y2) {
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        let y2=y2+1;
        while (y1 < y2) {
            do Screen.drawHorizontal(x1, x2, y1);
            let y1=y1+1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        // for 0<=dy<=r, draw lines
        var int dx, dy;
        let dy=1;
        // r <= dy
        do Screen.drawHorizontal(x-r, x+r, y);
        while (~(dy > r)) {
            let dx = Math.sqrt((r*r) - (dy*dy));
            do Screen.drawHorizontal(x-dx, x+dx, y-dy);
            do Screen.drawHorizontal(x-dx, x+dx, y+dy);
            let dy=dy+1;
        }
        return;
    }
}
