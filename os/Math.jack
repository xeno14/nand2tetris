// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    static int WORDSIZE;

    /** Initializes the library. */
    function void init() {
        var int i;
        
        let WORDSIZE = 16;
        let twoToThe = Array.new(WORDSIZE);
        let twoToThe[0] = 1;
        let i = 1;
        while (i<WORDSIZE) {
            // t[i] = t[i-1] * 2
            let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
            let i = i+1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    // returns true if i-th bit of x is 1, false otherwise
    function boolean bit(int x, int i) {
        return x&twoToThe[i];
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum=0;
        let i=0;
        let shiftedX=x;
        while (i<WORDSIZE) {
            if (Math.bit(y, i)) {
                let sum=sum+shiftedX;
            }
            // shiftedX *= 2
            let shiftedX=shiftedX+shiftedX;
            let i=i+1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean xneg, yneg, neg;
        var int q, res;

        // don't trust x*y < 0 is it may overflow
        let xneg = (x < 0);
        let yneg = (y < 0);
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y>x) {
            return 0;
        }
        let q = Math.divide(x, y+y);
        if ((x - (2*q*y)) < y) {
            let res = q+q;
        } else {
            let res = q+q+1;
        }
        if (~(xneg = yneg)) {
            let res = -res;
        }
        return res;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, tmp, tmpSquared;
        let y=0;
        let i=WORDSIZE-1;
        while (i > -1) {
            let tmp = y+twoToThe[i];  // y + 2^i
            let tmpSquared = tmp * tmp;
            if (tmpSquared > 0) { // not overflow
                // (y + 2^i)^2 <= x
                if ((tmpSquared < x) | (tmpSquared = x)) {
                    let y = tmp;
                }
            }
            let i=i-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        } else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
