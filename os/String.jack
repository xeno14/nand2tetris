// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 1) {
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length=length+1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int res, i, d;
        var boolean neg;
        let neg = (charAt(0) = 45);  // leading -
        let res = 0;
        if (neg) {
            let i=1;
        } else {
            let i=0;
        }
        while (i < length) {
            // integer value of str[i]
            let d = charAt(i) - 48;
            let res = (res*10) + d;
            let i = i+1;
        }
        if (neg) { 
            let res = -res;
        }
        return res;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i, j, d, tmp;
        var boolean neg;

        let length = 0;
        let neg = (val < 0);

        if (neg) { 
            let val = -val;
        }

        // append char from lower to upper digits
        while (val > 0) {
            let d = val - ((val/10)*10);  // mod10
            do appendChar(d + 48);
            let val = val / 10;
        }

        if (neg) { 
            do appendChar(45); // -
        }

        // reverse
        let i=0;
        let j=length-1;
        while (i<j) {
            let tmp = str[i];
            let str[i] = str[j];
            let str[j] = tmp;
            let i=i+1;
            let j=j-1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
